package org.cuatrovientos.dam.ed.DAM_ED_EntregaJUnit12;

import static org.junit.jupiter.api.Assertions.assertTrue;
import static org.junit.jupiter.api.Assertions.fail;

import org.junit.jupiter.api.AfterEach;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;

public class GeneradorIpTest {

    private GeneradorIp generadorIp;

    @BeforeEach
    public void setUp() {
        generadorIp = new GeneradorIp();
    }

    @AfterEach
    public void tearDown() {
        generadorIp = null;
    }

    @Test
    public void testGenerarNumero() {
        int min = 0;
        int max = 254;
        int numero = generadorIp.generarNumero(min, max);
        assertTrue(numero >= min && numero <= max, "El número generado está fuera del rango esperado [" + min + ", " + max + "]: " + numero);
    }

    @Test
    public void testGeneraIp() {
        String ip = generadorIp.generarIp();
        String[] octetos = ip.split("\\.");

        // Verificar que todos los octetos son números enteros, diferentes de 0 y están dentro del rango permitido
        for (String octeto : octetos) {
            int valor;
            try {
                valor = Integer.parseInt(octeto);
            } catch (NumberFormatException e) {
                fail("Uno de los octetos no es un número entero válido: " + octeto);
                return; // Salir del bucle si falla la conversión
            }
            assertTrue(valor != 0, "Al menos uno de los octetos es 0: " + ip);
            assertTrue(valor >= 1 && valor <= 254, "Uno de los octetos está fuera del rango permitido [1, 254]: " + ip);
        }
    }

}
