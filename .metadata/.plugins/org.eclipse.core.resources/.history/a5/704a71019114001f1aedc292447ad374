/**
 * 
 */
package org.cuatrovientos.dam.ed.DAM_ED_EntregaJUnit12;

import static org.junit.jupiter.api.Assertions.*;

import org.junit.jupiter.api.AfterEach;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;

/**
 * 
 */
class GeneradorIpTest {

	private GeneradorIp generadorIp;

	/**
	 * @throws java.lang.Exception
	 */
	@BeforeEach
	void setUp() throws Exception {
		generadorIp = new GeneradorIp();
	}

	/**
	 * @throws java.lang.Exception
	 */
	@AfterEach
	void tearDown() throws Exception {
		generadorIp = null;
	}

	/**
	 * Test method for
	 * {@link org.cuatrovientos.dam.ed.DAM_ED_EntregaJUnit12.GeneradorIp#generarNumero(int, int)}.
	 */
	@Test
	public int generarNumero(int min, int max) {
	    try {
	        // Comprueba si min y max son enteros
	        int minInt = Integer.parseInt(String.valueOf(min));
	        int maxInt = Integer.parseInt(String.valueOf(max));

	        // Genera un número aleatorio dentro del rango
	        return random.nextInt((maxInt - minInt) + 1) + minInt;
	    } catch (NumberFormatException e) {
	        // Si alguno de los parámetros no es un entero, lanza una excepción
	        throw new IllegalArgumentException("Los parámetros min y max deben ser enteros");
	    }
	}

	/**
	 * Test method for
	 * {@link org.cuatrovientos.dam.ed.DAM_ED_EntregaJUnit12.GeneradorIp#generarIp()}.
	 */
	@Test
	void testGenerarIp() {
		String ip = generadorIp.generarIp();
		String[] partes = ip.split("\\.");
		int primero = Integer.parseInt(partes[0]);
		int ultimo = Integer.parseInt(partes[3]);
		assertNotEquals(0, primero, "La IP no puede empezar con 0");
		assertNotEquals(0, ultimo, "La IP no puede terminar con 0");
	}
}
