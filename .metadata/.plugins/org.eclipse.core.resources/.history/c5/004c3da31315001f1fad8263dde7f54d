/**
 * 
 */
package org.cuatrovientos.dam.ed.DAM_ED_EntregaJUnit22;

import static org.junit.jupiter.api.Assertions.*;

import java.util.ArrayList;

import org.junit.jupiter.api.AfterEach;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;

/**
 * 
 */
class TransporteTest {

	private Camioneta camioneta;
	private Paquete paquete;

	/**
	 * @throws java.lang.Exception
	 */
	@BeforeEach
	void setUp() throws Exception {
		camioneta = new Camioneta();
		paquete = new Paquete("Madrid", 10.5f);
	}

	/**
	 * @throws java.lang.Exception
	 */
	@AfterEach
	void tearDown() throws Exception {
		camioneta = null;
		paquete = null;
	}

	/**
	 * Test method for
	 * {@link org.cuatrovientos.dam.ed.DAM_ED_EntregaJUnit22.Transporte#incluirPaquete(org.cuatrovientos.dam.ed.DAM_ED_EntregaJUnit22.Paquete)}.
	 */
	@Test
	void testIncluirPaquete() {
		assertEquals(0, camioneta.pesoTotal(), 0.001, "El peso total debe ser 0 antes de añadir un paquete");

		camioneta.incluirPaquete(paquete);
		float expectedPeso = paquete.getPeso();
		float actualPeso = camioneta.pesoTotal();
		assertEquals(expectedPeso, actualPeso, 0.001, "El peso total no coincide con el peso del paquete añadido");

		ArrayList<Paquete> paquetes = camioneta.getPaquetes();
		assertNotNull(paquetes, "La lista de paquetes no debe ser null");
		assertEquals(1, paquetes.size(), "Debe haber un paquete en la lista");
		assertEquals(paquete, paquetes.get(0), "El paquete añadido debe coincidir con el paquete en la lista");
	}

	/**
	 * Test method for
	 * {@link org.cuatrovientos.dam.ed.DAM_ED_EntregaJUnit22.Transporte#pesoTotal()}.
	 */
	@Test
	void testPesoTotal() {
		assertEquals(0, camioneta.pesoTotal(), 0.001, "El peso total debe ser 0 antes de añadir un paquete");

		camioneta.incluirPaquete(paquete);
		float expectedPeso = 10.5f;
		float actualPeso = camioneta.pesoTotal();
		assertEquals(expectedPeso, actualPeso, 0.001, "El peso total no coincide con el peso esperado");

		Paquete otroPaquete = new Paquete("Barcelona", 5.0f);
		camioneta.incluirPaquete(otroPaquete);
		expectedPeso = 15.5f;
		actualPeso = camioneta.pesoTotal();
		assertEquals(expectedPeso, actualPeso, 0.001,
				"El peso total no coincide con la suma de los pesos de los paquetes");

		camioneta.incluirPaquete(null);
		actualPeso = camioneta.pesoTotal();
		assertEquals(expectedPeso, actualPeso, 0.001, "El peso total no debe cambiar al añadir null");
	}

	/**
	 * Test method for
	 * {@link org.cuatrovientos.dam.ed.DAM_ED_EntregaJUnit22.Transporte#recorrerDistancia()}.
	 */
	@Test
	void testRecorrerDistancia() {
		int actualDistancia = camioneta.recorrerDistancia();
		assertTrue(actualDistancia >= 70 && actualDistancia <= 100,
				"La distancia recorrida está fuera del rango esperado: " + actualDistancia);
	}

}
