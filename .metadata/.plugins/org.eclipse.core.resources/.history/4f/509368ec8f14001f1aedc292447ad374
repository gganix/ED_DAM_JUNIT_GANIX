/**
 * 
 */
package org.cuatrovientos.dam.ed.DAM_ED_EntregaJUnit12;

import static org.junit.jupiter.api.Assertions.*;

import org.junit.jupiter.api.AfterEach;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;

/**
 * 
 */
class GeneradorIpTest {

	private GeneradorIp generadorIp;

	/**
	 * @throws java.lang.Exception
	 */
	@BeforeEach
	void setUp() throws Exception {
		generadorIp = new GeneradorIp();
	}

	/**
	 * @throws java.lang.Exception
	 */
	@AfterEach
	void tearDown() throws Exception {
		generadorIp = null;
	}

	/**
	 * Test method for
	 * {@link org.cuatrovientos.dam.ed.DAM_ED_EntregaJUnit12.GeneradorIp#generarNumero(int, int)}.
	 */
	@Test
	void testGenerarNumero() {
	    int numero = generadorIp.generarNumero(0, 254);
	    assertTrue(numero >= 0 && numero <= 254, "El número generado (" + numero + ") no está dentro del rango esperado [0, 254]");
	    assertEquals(numero, (int) numero, "El número generado no es un entero");
	}

	/**
	 * Test method for
	 * {@link org.cuatrovientos.dam.ed.DAM_ED_EntregaJUnit12.GeneradorIp#generarIp()}.
	 */
	@Test
	void testGenerarIp() {
		String ip = generadorIp.generarIp();
		String[] partes = ip.split("\\.");
		int primero = Integer.parseInt(partes[0]);
		int ultimo = Integer.parseInt(partes[3]);
		assertNotEquals(0, primero, "La IP no puede empezar con 0");
		assertNotEquals(0, ultimo, "La IP no puede terminar con 0");
	}
}
